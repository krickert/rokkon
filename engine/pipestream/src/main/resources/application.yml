quarkus:
  application:
    name: pipeline-engine


  generate-code:
    grpc:
      scan-for-proto: com.rokkon.pipeline:protobuf,com.google.api.grpc:proto-google-common-protos
      codegen:
        type: mutiny
        # Skip code generation if needed using property
        # skip: ${grpc.codegen.skip:false}
  http:
    port: ${QUARKUS_HTTP_PORT:38082}
    host: ${ENGINE_HOST:0.0.0.0}

  grpc:
    server:
      # With unified server, gRPC uses the same port as HTTP
      use-separate-server: false  # Use unified HTTP server (recommended)
      enable-reflection-service: true
      max-inbound-message-size: 419430400
      health:
        enabled: true


    # gRPC client defaults
    clients:
      default:
        max-inbound-message-size: 419430400

  # Consul configuration
  consul-config:
    # Enabled by default for proper engine registration
    enabled: true
    fail-on-missing-key: true  # Fail if required config doesn't exist - use CLI to seed first
    agent:
      host-port: ${consul.host:localhost}:${consul.port:8500}
    properties-value-keys: pipeline/${CLUSTER_NAME:default}/config
    # Watch for changes
    watch:
      enabled: true
      period: 10s
    # Configuration format
    format: properties

  # Note: There is no quarkus-consul-client extension for service registration
  # The engine uses manual registration via EngineRegistrationService

  # Jackson configuration for consistent JSON formatting
  jackson:
    property-naming-strategy: SNAKE_CASE

# Pipeline configuration - using 'pipeline' prefix instead of 'rokkon'
pipeline:
  consul:
    kv-prefix: pipeline  # This is the prefix for Consul KV store (default was 'rokkon')
  
  # Cache configuration for gRPC channels
  cache:
    caffeine:
      "grpc-channels":
        expire-after-write: 10m
        maximum-size: 100
    
  # Index external dependencies for CDI discovery
  index-dependency:
    engine-consul:
      group-id: com.rokkon.pipeline
      artifact-id: consul
    engine-models:
      group-id: com.rokkon.pipeline
      artifact-id: engine-models
    engine-validators:
      group-id: com.rokkon.pipeline
      artifact-id: engine-validators
    engine-dynamic-grpc:
      group-id: com.rokkon.pipeline
      artifact-id: dynamic-grpc
    # Add missing classes for reflection
    rokkon-commons:
      group-id: com.rokkon.pipeline
      artifact-id: rokkon-commons
    # Add interface module for OpenAPI models
    commons-interface:
      group-id: com.rokkon.pipeline
      artifact-id: interface

  # Health check configuration
  health:
    extensions:
      enabled: true
    readiness:
      enabled: true
    liveness:
      enabled: true

  # Logging
  log:
    level: INFO
    category:
      "com.rokkon":
        level: DEBUG
      "io.grpc":
        level: INFO

  # Container image configuration
  container-image:
    build: true
    group: rokkon
    name: rokkon-engine
    tag: latest
    registry: nas.rokkon.com:5000
    push: false  # Disable auto-push, we'll do it manually
    insecure: true  # For local registry without TLS

  # Dev services configuration
  devservices:
    enabled: true

# Engine-specific configuration
consul:
  host: ${CONSUL_HOST:localhost}
  port: ${CONSUL_PORT:8500}

# Engine configuration
engine:
  host: ${ENGINE_HOST:localhost}

# Rokkon configuration
rokkon:
  service-discovery:
    type: consul-direct  # Use dynamic Consul discovery without pre-configuration

# Stork configuration for service discovery
stork:
  # Engine service registration with Consul
  pipeline-engine:
    service-registrar:
      type: consul
      consul-host: ${consul.host:localhost}
      consul-port: ${consul.port:8500}
      # Register with HTTP port (handles both REST and gRPC)
      instance-port: ${quarkus.http.port:38082}
      # Additional metadata
      metadata:
        service-type: ENGINE
        port: ${quarkus.http.port:38082}  # Single port for both protocols
        unified-server: true
        version: ${quarkus.application.version:1.0.0}
      # Health check configuration
      check-type: grpc
      check-interval: 10s
      deregister-critical-service-after: 30s
  
  # Default service discovery for all services
  default:
    service-discovery:
      type: consul
      consul-host: ${consul.host:localhost}
      consul-port: ${consul.port:8500}
      refresh-period: 10s
    load-balancer:
      type: round-robin

  # Module-specific configurations
  echo-service:
    service-discovery:
      type: consul
      consul-host: ${consul.host:localhost}
      consul-port: ${consul.port:8500}
    load-balancer:
      type: least-requests

  chunker-service:
    service-discovery:
      type: consul
      consul-host: ${consul.host:localhost}
      consul-port: ${consul.port:8500}
    load-balancer:
      type: least-response-time

  parser-service:
    service-discovery:
      type: consul
      consul-host: ${consul.host:localhost}
      consul-port: ${consul.port:8500}
    load-balancer:
      type: round-robin

  embedder-service:
    service-discovery:
      type: consul
      consul-host: ${consul.host:localhost}
      consul-port: ${consul.port:8500}
    load-balancer:
      type: least-requests

grpc:
  client:
    max-inbound-message-size: ${GRPC_MAX_MESSAGE_SIZE:4194304}
    keepalive-time-seconds: ${GRPC_KEEPALIVE_TIME:30}
    keepalive-timeout-seconds: ${GRPC_KEEPALIVE_TIMEOUT:10}

# SmallRye Config - disable unknown property validation
smallrye:
  config:
    mapping:
      validate-unknown: false

# Dev profile
"%dev":
  quarkus:
    log:
      level: INFO
      console:
        enable: true
      category:
        "com.rokkon.pipeline":
          level: INFO
        "org.testcontainers":
          level: WARN
        "io.quarkus.devservices":
          level: INFO
        "jdk.event.security":
          level: WARN
        "jd.ev.security":
          level: WARN
        "io.quarkus":
          level: INFO
        "io.smallrye":
          level: INFO
        "io.vertx":
          level: WARN
        # Silence Apache HTTP client debug logs
        "org.apache.hc":
          level: WARN
        "org.apache.http":
          level: WARN
        "org.apache.hc.client5.http.wire":
          level: ERROR
        # Silence Netty debug logs
        "io.netty":
          level: WARN
        # Silence terminal/TTY warnings
        "org.aesh":
          level: ERROR
        # Silence JSON provider logs
        "jakarta.json.spi":
          level: WARN
        # Silence Docker client debug logs
        "com.github.dockerjava":
          level: WARN

    # HTTP configuration for dev mode
    http:
      host: 0.0.0.0  # Listen on all interfaces in container
      port: 38090  # Both REST and gRPC will use this port

    # Dev Services configuration
    devservices:
      enabled: true

    # Container configuration for dev mode
    container-image:
      build: true
      group: rokkon
      name: rokkon-engine-dev
      tag: dev

    # Dev mode configuration
    dev:
      instrumentation: true
    
    # Docker client configuration for dev mode
    docker-client:
      # Use the default Docker socket
      docker-host: "unix:///var/run/docker.sock"
      # Connection timeout
      connection-timeout: 30s
      # Read timeout  
      read-timeout: 30s

    # In dev mode, enable Consul features if consul.host is configured
    consul-config:
      enabled: false
    
    # Web bundler configuration for modern UI
    web-bundler:
      bundling:
        watch: true  # Enable hot reload in dev mode

  # Consul configuration for dev mode
  consul:
    host: ${CONSUL_HOST:localhost}  # Use localhost in dev
    port: ${CONSUL_PORT:8501}
    enabled: true

  # Enable auto-start of Consul container in dev mode
  rokkon:
    dev:
      consul:
        auto-start: true

# Test profile  
"%test":
  quarkus:
    grpc:
      server:
        port: 0  # Random port for tests
    consul-config:
      enabled: false  # Disable in tests unless explicitly needed
    log:
      level: INFO

# Production profile
"%prod":
  quarkus:
    consul-config:
      enabled: true  # Enable Consul config in production
    log:
      level: INFO
