quarkus:
  application:
    name: echo
  http:
    port: 39100  # Single port for both HTTP and gRPC (391xx convention for modules)
  generate-code:
    grpc:
      scan-for-proto: com.rokkon.pipeline:protobuf,com.google.api.grpc:proto-google-common-protos
  smallrye-openapi:
    path: /q/openapi
    info-title: Echo Module API
    info-version: 1.0.0
    info-description: REST API for the Echo gRPC Module
  swagger-ui:
    always-include: true
    path: /q/swagger-ui
  grpc:
    server:
      # Use unified server mode - gRPC shares port with HTTP
      use-separate-server: false
      host: 0.0.0.0
      enable-reflection-service: true
      max-inbound-message-size: 1073741824  # 1GB
      max-outbound-message-size: 1073741824  # 1GB for responses
    clients:
      echoService:
        host: localhost
        port: 39100  # Use unified HTTP port
        max-inbound-message-size: 1073741824  # 1GB
  log:
    level: INFO
    category:
      "com.rokkon":
        level: DEBUG
  container-image:
    build: false  # Override with -Dquarkus.container-image.build=true
    push: false   # Override with -Dquarkus.container-image.push=true
    group: pipeline
    name: echo-module
    tag: latest
    # Additional labels for service mesh integration
    labels:
      "consul.service": "module-echo"
      "consul.connect": "true"
  
  # OpenTelemetry configuration
  otel:
    enabled: true
    traces:
      enabled: true
    metrics:
      enabled: true
    logs:
      enabled: true
    exporter:
      otlp:
        # In production, this will be set via environment variable to the sidecar collector
        endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:4317}
        protocol: ${OTEL_EXPORTER_OTLP_PROTOCOL:grpc}
    resource:
      attributes:
        service.name: echo-module
        service.namespace: pipeline
        deployment.environment: ${quarkus.profile:prod}
  
  # Micrometer metrics configuration
  micrometer:
    enabled: true
    export:
      prometheus:
        enabled: true
    binder:
      jvm: true
      system: true
      grpc:
        server: true
        client: true

# Test profile configuration
"%test":
  quarkus:
    grpc:
      server:
        port: 0  # Use random port for tests
        max-inbound-message-size: 1073741824  # 1GB for tests
      clients:
        echoService:
          max-inbound-message-size: 1073741824  # 1GB
    # Disable OpenTelemetry in tests
    otel:
      enabled: false
      sdk:
        disabled: true

# Dev profile - easy local Docker builds
"%dev":
  quarkus:
    container-image:
      build: true    # Auto-build image in dev mode
      push: false    # Don't push to registry
      image: "rokkon/echo-module:dev"
      registry: ""   # Use local Docker
