syntax = "proto3";

package com.rokkon.search.engine;

option java_multiple_files = true;
option java_package = "com.rokkon.search.engine";
option java_outer_classname = "EngineServiceProto";

import "rokkon_core_types.proto"; // This should define com.rokkon.search.model.PipeDoc

// Engine-level process status
enum ProcessStatus {
  UNKNOWN = 0;
  ACCEPTED = 1;
  ERROR = 2;
}

// Response for engine processing operations
message ProcessResponse {
  string stream_id = 1;
  ProcessStatus status = 2;
  string message = 3;
  string request_id = 4;
  int64 timestamp = 5;
}

// PipeStreamEngine service orchestrates pipeline execution.
service PipeStreamEngine {
  // --- Existing RPCs (can be kept for specific internal/advanced use cases or deprecated over time) ---
  // --- NOTE: a sink has the same signature - the engine controls the outgoing routing, if it's a sink implementation then that will be noted in the step
  rpc testPipeStream(com.rokkon.search.model.PipeStream) returns (com.rokkon.search.model.PipeStream);
  rpc processPipeAsync(com.rokkon.search.model.PipeStream) returns (ProcessResponse);
  rpc processPipeStream(stream com.rokkon.search.model.PipeStream) returns (stream ProcessResponse);
}