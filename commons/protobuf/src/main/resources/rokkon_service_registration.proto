syntax = "proto3";

package com.rokkon.search.registration.api;

// Consider standardizing your Java package options across all Rokkon protos
option java_package = "com.rokkon.search.registration.api";
option java_multiple_files = true;
option java_outer_classname = "ModuleRegistrationProto";

// Service definition for modules to register with the platform
service ModuleRegistrationService {
  // Allows a module instance to register itself with the Rokkon platform.
  // The platform will then handle the actual registration with Consul.
  rpc RegisterModule (RegisterModuleRequest) returns (RegisterModuleResponse);

  // Future: Allows a module instance to gracefully deregister itself.
  // rpc DeregisterModule (DeregisterModuleRequest) returns (DeregisterModuleResponse);

  // Future: Allows a module instance to update its status or send heartbeats if using TTL checks.
  // rpc UpdateModuleStatus (UpdateModuleStatusRequest) returns (UpdateModuleStatusResponse);
}

// Enum for specifying the type of health check the module exposes.
enum HealthCheckType {
  HEALTH_CHECK_TYPE_UNKNOWN = 0; // Default, should not be used
  HTTP = 1;                      // Standard HTTP GET endpoint
  GRPC = 2;                      // Standard gRPC health check (grpc.health.v1.Health)
  TCP = 3;                       // Simple TCP connect check
  TTL = 4;                       // Time-To-Live; module must send heartbeats via UpdateModuleStatus
}

// Request message for registering a module instance.
message RegisterModuleRequest {
  // The unique identifier for the *type* of this module.
  // This ID links the running instance to its definition in PipelineModuleConfiguration.
  // Example: "echo-processor-v1", "opennlp-chunker-v2.1"
  string implementation_id = 1;

  // The desired service name for this specific instance in Consul.
  // Can be unique per instance (e.g., "echo-instance-abc12") or a common name
  // if multiple instances of the same implementationId are load-balanced.
  // If multiple instances share a name, instance_id_hint becomes more important.
  string instance_service_name = 2;

  // The network-accessible host or IP address of this module instance.
  string host = 3;

  // The port number on which this module instance's gRPC server is listening.
  int32 port = 4;

  // The type of health check this module instance supports.
  HealthCheckType health_check_type = 5;

  // The endpoint for the health check.
  // - For HTTP: Path (e.g., "/health/ready")
  // - For GRPC: Fully qualified service/method (e.g., "grpc.health.v1.Health/Check")
  // - For TCP: Can be empty (host/port from above are used)
  // - For TTL: Not applicable here, interval defined by registration service
  string health_check_endpoint = 6;

  // The JSON string representation of this module instance's custom configuration.
  // The Rokkon Registration Service will canonicalize this JSON and calculate its digest.
  string instance_custom_config_json = 7; // MODIFIED: Was config_digest

  // Optional: The software version of this module instance (e.g., "1.0.2").
  optional string module_software_version = 8;

  // Optional: A hint for generating a unique instance ID in Consul.
  // If not provided, the Registration Service will generate one.
  // Useful if the module instance already has a stable unique ID (e.g., K8s pod name).
  optional string instance_id_hint = 9;

  // Optional: Any additional tags this module instance suggests for its Consul registration.
  // The Registration Service may add its own standard tags as well.
  map<string, string> additional_tags = 10;
}

// Response message for the RegisterModule RPC.
message RegisterModuleResponse {
  // Indicates if the registration request was successfully processed by the
  // Rokkon Registration Service and forwarded to Consul.
  bool success = 1;

  // A human-readable message indicating the outcome or any errors.
  string message = 2;

  // The unique service ID assigned to this module instance by Consul
  // (as registered by the Rokkon Registration Service).
  // This can be useful for the module if it needs to perform self-deregistration later.
  string registered_service_id = 3;

  // The configuration digest calculated by the Rokkon Registration Service based on
  // the provided instance_custom_config_json. This is the digest that will be
  // stored in Consul tags and used for consistency checks.
  string calculated_config_digest = 4; // NEW

  // Optional: The canonical JSON string (Base64 encoded) that the Rokkon Registration
  // Service used to calculate the digest. Useful for debugging and verification by the module.
  optional string canonical_config_json_base64 = 5; // NEW (Optional)
}

// Future placeholder messages for DeregisterModule and UpdateModuleStatus
// message DeregisterModuleRequest {
//   string registered_service_id = 1; // ID obtained from RegisterModuleResponse
// }
// message DeregisterModuleResponse {
//   bool success = 1;
//   string message = 2;
// }
//
// message UpdateModuleStatusRequest {
//   string registered_service_id = 1;
//   // Could include current load, specific health status details, etc.
//   // For TTL checks, this would be the heartbeat.
// }
// message UpdateModuleStatusResponse {
//   bool acknowledged = 1;
// }